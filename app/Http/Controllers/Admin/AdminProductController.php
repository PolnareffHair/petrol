<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;

use App\Services\FormBuilder;

use Illuminate\Support\Facades\DB;

use Illuminate\Http\Request;


class AdminProductController extends Controller
{
    public function index()
    {
        $page_text_ua = json_decode(DB::table("page_options")->where("Name", "Main_page_text_ua")->first()->Settings);
        $page_text_ru = json_decode(DB::table("page_options")->where("Name", "Main_page_text_ru")->first()->Settings);

        return view("admin.index", ["page_text_ua" => $page_text_ua, "page_text_ru" => $page_text_ru]);
    }
    public function uppdate_main_page_text(Request $request)
    {
        DB::table("page_options")->where("Name", "Main_page_text_ru")->update(["Settings" =>  $request->textRU]);
        DB::table("page_options")->where("Name", "Main_page_text_ua")->update(["Settings" =>  $request->textUA]);
        return 0;
    }

    public function product($id)
    {       
        $product =  (array)DB::table('products')
            ->where('product_id', $id)
            ->get()
            ->first();

        if ($product == null) return "–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ";
        //make js video links to string
        $product["product_video_link"] = json_decode($product["product_video_link"]);
        /* making separeted links from array */


        $product["product_description_ru"] = json_encode($product["product_description_ru"]); //make js to string
        $product["product_description_ua"] = json_encode($product["product_description_ua"]);    
    
        
        $form = new FormBuilder($product,$product["product_id"],$product["product_name_ua"]); 

    
        $form->setLinks("/admin/uppdate_product","/admin/delete_product","/admin/products");
        $form->AddInputText(  "product_name","–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É h1 ",true,255,false,false);

        $form->AddInputText( "product_article","–ö–æ–¥ —Ç–æ–≤–∞—Ä—É/–∞—Ä—Ç–∏–∫–ª—å(–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",false,70, novoid:false);

        $form->AddInputNumber(  "product_price" , "–¶—ñ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—É " , false, [0, 900000]);

        $form->addZeroCheckbox("product_price_discount","–ó–Ω–∏–∂–∫–∞ " ,"–¶—ñ–Ω–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é", [0, 900000]);

        $form->addCheckbox("product_best_seller","–í—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –ø–ª–∞—à–∫—É —Ö—ñ—Ç ");
        
        $form->addCheckbox("product_show_country","–í—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –ø—Ä–∞–ø–æ—Ä –∫—Ä–∞—ó–Ω–∏ –≤–∏—Ä–æ–±–Ω–∏–∫–∞ üè¥Û†Å•Û†Å≥Û†Å∞Û†Å∂Û†Åø");

        $form->AddInputNumber(     "product_order_priority", "–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è ‚ÜïÔ∏è" , false,[0, 255]);     
      
        $form->AddSelect( "product_avalible_state","–°—Ç–∞–Ω –Ω–∞ —Å–∫–ª–∞–¥—ñ",["–¢–æ–≤–∞—Ä –≤—ñ–¥—Å—É—Ç–Ω—ñ–π", "–¢–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥—ñ", "–ü—ñ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ 2-—Ö —Ç–∏–∂–Ω—ñ–≤"]);

        $form->AddInputText( "product_title","–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (title)",true,70,false,"product_name");

        $form->AddHtmlEdit("product_description" ,"–û–ø–∏—Å —Ç–æ–≤–∞—Ä—É ");

        $form->AddInputText(   "product_meta_description","–ú–µ—Ç–∞ –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É(description tag)",true,1000,false,"product_name");

        $form->AddInputText(  "product_img_alt","–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –Ω–∞–ø–∏—Å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É",true,255,false,"product_name");

      
        $form->AddInputText(   "product_tags","–¢–µ–≥–∏ –ø–µ—Ä–µ—Ä–∞—Ö—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É(–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –¥–ª—è –ø–æ—à—É–∫—É)",true,1000,false,false);

        $form->AddInputText( "product_url","url –ø—Ä–æ–¥—É–∫—Ç—É —Ç—ñ–ª—å–∫–∏ –ª–∞—Ç–∏–Ω–∏—Ü—è –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤(–º–∞—î –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É)",true,255,"product_name");

        $form->addEditor(["admin.components.tags.editor","–ê—Ç—Ä–∏–±—É—Ç–∏"]);

        $form->addEditor(["admin.components.img.editor","–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è"]);

        $form->addEditor(["admin.components.video.editor","–í—ñ–¥–µ–æ"]);

        $form->addEditor(["admin.components.cat.editor","–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó"]);

        return $form->finish( );
    }
    public function uppdate_product(Request $request)
    {

        $result = $request->productchange;
        $id = $result["item_id"];

        unset($result["item_id"]);

        $result["product_article"] = $result["product_article"] ?? "    ";

        // $result["product_url_ru"] = preg_replace('/\s+/', '', $result["product_url_ru"]); //remove spaces from url
        // $result["product_url_ua"] = preg_replace('/\s+/', '', $result["product_url_ua"]); //remove spaces from url


        $result["product_description_ua"] =  htmlspecialchars($result["product_description_ua"]);
        $result["product_description_ru"] =  htmlspecialchars($result["product_description_ru"]);
        

        if ((DB::table("products")->where("product_id", '<>', $id)->where("product_url_ru", $result["product_url_ru"])->get()->count() !== 0)) return "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å –∑ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–º url ru –≤–∂–µ —ñ—Å–Ω—É—î";

        if ((DB::table("products")->where("product_id", '<>', $id)->where("product_url_ua", $result["product_url_ua"])->get()->count() !== 0)) return "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å –∑ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–º url ua –≤–∂–µ —ñ—Å–Ω—É—î";

        DB::table("products")->where("product_id", $id)->update($result);

        return  "–£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ";
    }
    public function delete_product(Request $request)
    {       
        if ($request->has('product_id')) {

            $id = $request->input('product_id');

            DB::table('attributes_values')->where( ["product_id"=>   $id])->delete();

            DB::table('category_to_product')->where( ["product_id"=>   $id])->delete();

            DB::table('products')->where('product_id', $id)->delete();
            
            
            $dir = getcwd() . '/images/product';  // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º 'ublic' –Ω–∞ 'public'
            $files = glob("$dir/{$id}_*");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—à–ª–∏—Å—å –ª–∏ —Ñ–∞–π–ª—ã
            if (!$files) {
                return "–§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ".$dir;
            }
            foreach ($files as $file) {
                if (!file_exists($file)) {
                    echo "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $file\n";
                }
            }
            return 0;
        } else return '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫';

    }

}
